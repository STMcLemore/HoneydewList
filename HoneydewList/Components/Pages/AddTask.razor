@page "/add-task"
@using Microsoft.AspNetCore.Components.Forms
@inject IHttpClientFactory HttpClientFactory

<h3>Add New Task</h3>

<EditForm Model="@taskItem" OnValidSubmit="HandleValidSubmit" FormName="NewTask1">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group row">
        <label for="title" class="col-sm-3">Title: </label>
        <InputText id="title" class="form-control col-sm-8" @bind-Value="@taskItem.Title" placeholder="Enter Title"></InputText>
        <ValidationMessage For="() => taskItem.Title" />
    </div>

    <div class="form-group row">
        <label for="description" class="col-sm-3">Description: </label>
        <InputTextArea id="description" class="form-control col-sm-8" @bind-Value="@taskItem.Description" placeholder="Enter Description"></InputTextArea>
        <ValidationMessage For="() => taskItem.Description" />
    </div>

    <div class="form-group row">
        <label for="priority" class="col-sm-3">Priority: </label>
        <InputSelect id="priority" class="form-control col-sm-8" @bind-Value="@taskItem.Priority" placeholder="Enter Priority">
            <option value="Low">Low</option>
            <option value="Medium">Medium</option>
            <option value="High">High</option>
        </InputSelect>
        <ValidationMessage For="() => taskItem.Priority" />
    </div>

    <div class="form-group row">
        <label for="dueDate" class="col-sm-3">Due Date: </label>
        <InputDate id="DueDate" class="form-control col-sm-8" @bind-Value="@taskItem.DueDate"/>
        <ValidationMessage For="() => taskItem.DueDate" />
    </div>

    <div class="form-group row">
        <label for="type" class="col-sm-3">Task Type: </label>
        <InputSelect id="type" class="form-control col-sm-8" @bind-Value="@taskItem.Type">
            <option value="Daily">Daily</option>
            <option value="Weekly">Weekly</option>
            <option value="Monthly">Monthly</option>
        </InputSelect>
        <ValidationMessage For="() => taskItem.Type" />
    </div>

    <div class="form-group row">
        <label for="isCompleted" class="col-sm-3">Is Completed: </label>
        <InputSelect id="isCompleted" class="form-control col-sm-8" @bind-Value="@taskItem.IsCompleted">
            <option value="true">Yes</option>
            <option value="false">No</option>
        </InputSelect>
        <ValidationMessage For="() => taskItem.IsCompleted" />
    </div>

    <button type="submit" class="btn btn-primary">Add Task</button>
</EditForm>

@if (isSuccess)
{
    <div class="alert alert-success mt-3">Task added successfully!</div>
}
@if (isError)
{
    <div class="alert alert-danger mt-3">An error occurred while adding the task.</div>
}

@code {
    TaskItem taskItem = new ();
    private bool isSuccess = false;
    private bool isError = false;

    private async Task HandleValidSubmit()
    {
        try
        {
            Console.WriteLine($"New Task - Title: {taskItem.Title}, Description: {taskItem.Description}, Priority: {taskItem.Priority}, DueDate: {taskItem.DueDate}, Type: {taskItem.Type}");

            var httpClient = HttpClientFactory.CreateClient("ApiClient");

            var response = await httpClient.PostAsJsonAsync("https://localhost:7074/api/task", taskItem);

            if (response.IsSuccessStatusCode)
            {
                isSuccess = true;
                isError = false;
                taskItem = new TaskItem();
            }
            else
            {
                isSuccess = false;
                isError = true;
            }
        }
        catch (Exception ex)
        {
            isSuccess = false;
            isError = true;
            Console.WriteLine($"Error: {ex.Message}");
        }


    }
}

